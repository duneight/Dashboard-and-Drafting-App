generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id                 String   @id @default(cuid())
  gameKey            String   @unique
  gameId             Int      @unique
  name               String
  code               String
  type               String
  url                String?
  season             String
  isGameOver         Boolean  @default(false)
  isRegistrationOver Boolean  @default(false)
  isPlayoffsOver     Boolean  @default(false)
  isOffseason        Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  leagues            League[]

  @@map("games")
}

model League {
  id              String    @id @default(cuid())
  leagueKey       String    @unique
  leagueId        Int       @unique
  name            String
  url             String?
  logoUrl         String?
  draftStatus     String
  numTeams        Int
  scoringType     String?
  leagueType      String?
  isFinished      Boolean   @default(false)
  gameId          String?
  season          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  currentWeek     Int?
  endDate         String?
  endWeek         Int?
  rosterPositions String?
  settings        String?
  startDate       String?
  startWeek       Int?
  statCategories  String?
  game            Game?     @relation(fields: [gameId], references: [id])
  matchups        Matchup[]
  teams           Team[]

  @@index([season])
  @@index([gameId])
  @@map("leagues")
}

model Team {
  id                    String    @id @default(cuid())
  teamKey               String
  teamId                Int
  name                  String
  url                   String?
  numberOfMoves         Int?
  numberOfTrades        Int?
  clinchedPlayoffs      Boolean   @default(false)
  managerNickname       String?
  managerEmail          String?
  managerIsCommissioner Boolean   @default(false)
  wins                  Int       @default(0)
  losses                Int       @default(0)
  ties                  Int       @default(0)
  percentage            Float     @default(0)
  pointsFor             Float     @default(0)
  pointsAgainst         Float     @default(0)
  rank                  Int?
  isFinished            Boolean   @default(false)
  leagueId              String
  season                String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  matchupsAsTeam1       Matchup[] @relation("Team1Matchups")
  matchupsAsTeam2       Matchup[] @relation("Team2Matchups")
  league                League    @relation(fields: [leagueId], references: [id])

  @@unique([teamKey, season])
  @@unique([teamId, season])
  @@index([season])
  @@index([leagueId, season])
  @@index([managerNickname])
  @@map("teams")
}

model Matchup {
  id            String   @id @default(cuid())
  matchupId     Int
  week          Int
  status        String?
  isPlayoffs    Boolean  @default(false)
  isConsolation Boolean  @default(false)
  isTied        Boolean  @default(false)
  winnerTeamKey String?
  leagueId      String
  season        String
  team1Key      String
  team2Key      String
  team1Points   Float?
  team2Points   Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  statWinners   String?
  team1Stats    String?
  team2Stats    String?
  weekEnd       String?
  weekStart     String?
  league        League   @relation(fields: [leagueId], references: [id])
  team1         Team     @relation("Team1Matchups", fields: [team1Key, season], references: [teamKey, season])
  team2         Team     @relation("Team2Matchups", fields: [team2Key, season], references: [teamKey, season])

  @@unique([matchupId, season])
  @@index([leagueId, week])
  @@index([season])
  @@index([isPlayoffs])
  @@index([winnerTeamKey])
  @@index([team1Key, season])
  @@index([team2Key, season])
  @@map("matchups")
}

model Transaction {
  id             String   @id @default(cuid())
  transactionKey String   @unique
  transactionId  Int
  type           String
  status         String?
  timestamp      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  faabBid        Int?
  picks          String?
  players        String?
  tradeeTeamKey  String?
  tradeeTeamName String?
  traderTeamKey  String?
  traderTeamName String?
  season         String

  @@unique([transactionId, season])
  @@map("transactions")
}

model DraftResult {
  id                 String   @id @default(cuid())
  pick               Int
  round              Int
  teamKey            String
  playerKey          String?
  position           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editorialPlayerKey String?
  firstName          String?
  fullName           String?
  headshotUrl        String?
  isUndroppable      Boolean  @default(false)
  lastName           String?
  nhlTeam            String?
  nhlTeamFullName    String?
  playerId           Int?
  playerUrl          String?
  positionType       String?
  uniformNumber      String?
  season             String

  @@unique([pick, teamKey, season])
  @@index([season])
  @@index([nhlTeam])
  @@index([position])
  @@map("draft_results")
}

model DraftSession {
  id        String          @id @default(cuid())
  year      String          @unique
  status    String          @default("active")
  settings  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  picks     DraftPick[]
  snapshots DraftSnapshot[]

  @@map("draft_sessions")
}

model DraftPick {
  id             String       @id @default(cuid())
  pick           Int
  round          Int
  teamIndex      Int
  teamName       String
  playerName     String?
  playerRank     Int?
  playerTeam     String?
  playerPosition String?
  averagePick    Float?
  pickedAt       DateTime     @default(now())
  sessionId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  session        DraftSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, pick])
  @@map("draft_picks")
}

model DraftSnapshot {
  id           String       @id @default(cuid())
  snapshotData String
  description  String?
  createdAt    DateTime     @default(now())
  sessionId    String
  session      DraftSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("draft_snapshots")
}
