# Vercel Deployment & Domain Management

## Project Structure for Vercel
```
my-stack/
├── apps/
│   ├── website/          # Marketing site (mysite.com)
│   │   ├── vercel.json   # Domain rewrites
│   │   └── .env.local    # Website env vars
│   └── myapp/           # Custom app (myapp.mysite.com)
│       └── .env.local    # App env vars (DB, Auth)
└── turbo.json            # Monorepo build config
```

## Vercel Configuration

### Website Project (vercel.json)
```json
{
  "rewrites": [
    {
      "source": "/myapp/:path*",
      "destination": "https://myapp.mysite.com/:path*"
    }
  ],
  "redirects": [
    {
      "source": "/old-page",
      "destination": "/new-page",
      "permanent": true
    }
  ]
}
```

### App Project (vercel.json)
```json
{
  "functions": {
    "app/api/**/*.ts": {
      "maxDuration": 30
    }
  },
  "env": {
    "NODE_ENV": "production"
  }
}
```

## Environment Variables

### Website (.env.local)
```bash
# Marketing site specific vars
NEXT_PUBLIC_SITE_URL="https://mysite.com"
NEXT_PUBLIC_GA_ID="G-XXXXXXXXXX"
```

### App (.env.local)
```bash
# Supabase
NEXT_PUBLIC_SUPABASE_URL="https://your-project.supabase.co"
NEXT_PUBLIC_SUPABASE_ANON_KEY="your-anon-key"

# Database
DATABASE_URL="postgresql://postgres:[password]@db.[hash].supabase.co:5432/postgres"

# App specific
NEXT_PUBLIC_APP_URL="https://myapp.mysite.com"
```

## Deployment Commands

### Initial Setup
```bash
# Install Vercel CLI
npm i -g vercel

# Login to Vercel
vercel login

# Link projects
cd apps/website
vercel link

cd ../myapp
vercel link
```

### Environment Variables in Vercel
```bash
# Set env vars for app project
cd apps/myapp
vercel env add NEXT_PUBLIC_SUPABASE_URL
vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY
vercel env add DATABASE_URL

# Set env vars for website project
cd ../website
vercel env add NEXT_PUBLIC_SITE_URL
```

### Deploy Commands
```bash
# Deploy app
cd apps/myapp
vercel --prod

# Deploy website
cd ../website
vercel --prod

# Deploy both from root
vercel --prod -r apps/myapp
vercel --prod -r apps/website
```

## Domain Management

### Add Domains
```bash
# Website project
cd apps/website
vercel domains add mysite.com
vercel domains add www.mysite.com

# App project
cd ../myapp
vercel domains add myapp.mysite.com
```

### DNS Configuration
```bash
# If using Vercel DNS (recommended)
# Vercel will automatically configure DNS records

# If using external DNS, add these records:
# A record: @ → 76.76.19.36
# CNAME: www → cname.vercel-dns.com
# CNAME: myapp → cname.vercel-dns.com
```

## Build Configuration

### Turborepo + Vercel
```json
// turbo.json
{
  "$schema": "https://turbo.build/schema.json",
  "pipeline": {
    "build": {
      "outputs": [".next/**"],
      "dependsOn": ["^build"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    },
    "lint": {}
  }
}
```

### Vercel Build Settings
```json
// vercel.json (root level)
{
  "buildCommand": "cd ../.. && npm run build",
  "installCommand": "cd ../.. && npm install",
  "outputDirectory": ".next"
}
```

## Performance Optimization

### Image Optimization
```tsx
import Image from 'next/image';

// ✅ Good: Optimized images
<Image
  src="/hero.jpg"
  alt="Hero image"
  width={1200}
  height={600}
  priority
  className="w-full h-auto"
/>
```

### Caching Strategies
```tsx
// API route with caching
export async function GET() {
  const data = await fetchData();
  
  return NextResponse.json(data, {
    headers: {
      'Cache-Control': 'public, s-maxage=3600, stale-while-revalidate=86400',
    },
  });
}
```

## Monitoring & Analytics

### Vercel Analytics
```tsx
// app/layout.tsx
import { Analytics } from '@vercel/analytics/react';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        {children}
        <Analytics />
      </body>
    </html>
  );
}
```

### Error Tracking
```tsx
// lib/errorBoundary.tsx
"use client";
import { Component, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: any) {
    console.error('Error caught by boundary:', error, errorInfo);
    // Send to error tracking service
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center">
          <h1>Something went wrong.</h1>
        </div>
      );
    }

    return this.props.children;
  }
}
```

## Troubleshooting

### Common Issues
- **Build fails**: Check environment variables in Vercel dashboard
- **Domain not working**: Verify DNS propagation (can take up to 48 hours)
- **API routes failing**: Check function timeout settings
- **Database connection**: Verify DATABASE_URL in production

### Debug Commands
```bash
# Check deployment status
vercel ls

# View logs
vercel logs

# Pull environment variables
vercel env pull

# Check domain status
vercel domains ls
```
description:
globs:
alwaysApply: false
---
